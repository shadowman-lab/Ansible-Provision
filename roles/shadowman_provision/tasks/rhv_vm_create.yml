---
- name: Block for RHV
  block:
    - name: Login to RHV
      redhat.rhv.ovirt_auth:
        hostname: "{{ rhvm_fqdn }}"
        username: "{{ rhvm_user }}"
        password: "{{ rhvm_password }}"
        ca_file: "{{ rhvm_cafile | default(omit) }}"
        insecure: "{{ rhvm_insecure | default(true) }}"

    - name: Change facts if running Windows
      ansible.builtin.set_fact:
        vm_memory: 8GiB
        vm_operating_system_tag: Windows
      when: operating_system == "Win2016"

    - name: Block to handle error with disk
      when: operating_system is match("RHEL.*")
      block:
        - name: Create and run Linux VM from template
          redhat.rhv.ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ item }}"
            template: "{{ template }}"
            cluster: "{{ cluster }}"
            memory: "{{ vm_memory }}"
            storage_domain: "{{ shadowman_storage_domain }}"
            high_availability: true
            state: "{{ vm_state }}"
            wait: true
          loop: "{{ vm_names }}"
          register: async_results
          async: 1000
          poll: 0

        - name: Check RHEL VM Creation status
          ansible.builtin.async_status:
            jid: "{{ async_result_item.ansible_job_id }}"
          loop: "{{ async_results.results }}"
          loop_control:
            loop_var: async_result_item
          register: async_poll_results
          until: async_poll_results.finished
          retries: 100
          delay: 10
      rescue:
        - name: Sleep for 10 seconds and continue with play
          ansible.builtin.wait_for:
            timeout: 10
          delegate_to: localhost

        - name: Attempt to run Linux VM again if disk issue
          redhat.rhv.ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ item }}"
            template: "{{ template }}"
            cluster: "{{ cluster }}"
            memory: "{{ vm_memory }}"
            high_availability: true
            state: "{{ vm_state }}"
            wait: true
          loop: "{{ vm_names }}"
          register: async_results_second
          async: 1000
          poll: 0

        - name: Check RHEL VM Running status
          ansible.builtin.async_status:
            jid: "{{ async_result_item.ansible_job_id }}"
          loop: "{{ async_results_second.results }}"
          loop_control:
            loop_var: async_result_item
          register: async_poll_results
          until: async_poll_results.finished
          retries: 100
          delay: 10

    - name: Create and run Windows VM from template
      redhat.rhv.ovirt_vm:
        auth: "{{ ovirt_auth }}"
        name: "{{ item }}"
        template: "{{ template }}"
        cluster: "{{ cluster }}"
        memory: "{{ vm_memory }}"
        storage_domain: "{{ shadowman_storage_domain }}"
        high_availability: true
        sysprep:
          host_name: "{{ item.split('.')[0] }}"
          domain: ad.shadowman.dev
          user_name: "{{ windowsuser }}"
          root_password: "{{ windowspassword }}"
          custom_script: |
            <?xml version="1.0" encoding="utf-8"?>
            <unattend xmlns="urn:schemas-microsoft-com:unattend">
                <settings pass="specialize">
                    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <ComputerName><![CDATA[$ComputerName$]]></ComputerName>
                        <RegisteredOrganization><![CDATA[$OrgName$]]></RegisteredOrganization>
                        <RegisteredOwner>User</RegisteredOwner>
                        <ProductKey><![CDATA[$ProductKey$]]></ProductKey>
                    </component>
                    <component name="Microsoft-Windows-UnattendedJoin" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <Identification>
                            <Credentials>
                                <Domain><![CDATA[$JoinDomain$]]></Domain>
                                <Password><![CDATA[$DomainAdminPassword$]]></Password> # gitleaks:allow
                                <Username><![CDATA[$DomainAdmin$]]></Username>
                            </Credentials>
                            <DebugJoin>true</DebugJoin>
                            <JoinDomain><![CDATA[$JoinDomain$]]></JoinDomain>
                            <MachineObjectOU><![CDATA[$MachineObjectOU$]]></MachineObjectOU>
                        </Identification>
                    </component>
                </settings>
                <settings pass="oobeSystem">
                    <component name="Microsoft-Windows-IE-ClientNetworkProtocolImplementation" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <HKLMProxyEnable>false</HKLMProxyEnable>
                    </component>
                    <component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <InputLocale><![CDATA[$InputLocale$]]></InputLocale>
                        <SystemLocale><![CDATA[$SystemLocale$]]></SystemLocale>
                        <UILanguage><![CDATA[$UILanguage$]]></UILanguage>
                        <UILanguageFallback>en-US</UILanguageFallback>
                        <UserLocale><![CDATA[$UserLocale$]]></UserLocale>
                    </component>
                    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <Display>
                            <ColorDepth>32</ColorDepth>
                            <HorizontalResolution>1024</HorizontalResolution>
                            <RefreshRate>75</RefreshRate>
                            <VerticalResolution>768</VerticalResolution>
                        </Display>
                        <OOBE>
                            <HideEULAPage>true</HideEULAPage>
                            <SkipUserOOBE>true</SkipUserOOBE>
                        </OOBE>
                        <UserAccounts>
                            <AdministratorPassword>
                                <Value><![CDATA[$AdminPassword$]]></Value>
                                <PlainText>true</PlainText>
                            </AdministratorPassword>
                        </UserAccounts>
                        <RegisteredOrganization><![CDATA[$OrgName$]]></RegisteredOrganization>
                        <RegisteredOwner>User</RegisteredOwner>
                        <TimeZone><![CDATA[$TimeZone$]]></TimeZone>
                    </component>
                </settings>
                <settings pass="windowsPE">
                    <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <SetupUILanguage>
                            <UILanguage><![CDATA[$SetupUiLanguageUiLanguage$]]></UILanguage>
                        </SetupUILanguage>
                        <InputLocale><![CDATA[$InputLocale$]]></InputLocale>
                        <UILanguage><![CDATA[$UILanguage$]]></UILanguage>
                        <SystemLocale><![CDATA[$SystemLocale$]]></SystemLocale>
                        <UILanguageFallback>en-US</UILanguageFallback>
                        <UserLocale><![CDATA[$UserLocale$]]></UserLocale>
                    </component>
                    <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                        <UserData>
                            <ProductKey>
                                <Key><![CDATA[$ProductKey$]]></Key>
                                <WillShowUI>Never</WillShowUI>
                            </ProductKey>
                            <AcceptEula>true</AcceptEula>
                            <Organization><![CDATA[$OrgName$]]></Organization>
                            <FullName>User</FullName>
                        </UserData>
                    </component>
                </settings>
                <cpi:offlineImage cpi:source="catalog://catalogs/windows2012-x86/sources/install_windows longhorn serverenterprise.clg" xmlns:cpi="urn:schemas-microsoft-com:cpi" />
            </unattend>
        state: "{{ vm_state }}"
        wait: true
      when: operating_system is match("Win.*")
      loop: "{{ vm_names }}"
      register: async_results
      async: 1000
      poll: 0

    - name: Check Windows VM Creation status
      ansible.builtin.async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      loop: "{{ async_results.results }}"
      loop_control:
        loop_var: async_result_item
      when: operating_system is match("Win.*")
      register: async_poll_results
      until: async_poll_results.finished
      retries: 100
      delay: 10

    - name: Apply OS tag
      redhat.rhv.ovirt_tag:
        auth: "{{ ovirt_auth }}"
        name: "{{ vm_operating_system_tag }}"
        state: attached
        vms:
          - "{{ item }}"
      loop: "{{ vm_names }}"

    - name: Apply Owner tag
      redhat.rhv.ovirt_tag:
        auth: "{{ ovirt_auth }}"
        name: "{{ owner.split('@')[0] }}"
        state: attached
        vms:
          - "{{ item }}"
      loop: "{{ vm_names }}"
      when: owner is defined

    - name: Apply environment tag
      redhat.rhv.ovirt_tag:
        auth: "{{ ovirt_auth }}"
        name: "{{ env }}"
        state: attached
        vms:
          - "{{ item }}"
      loop: "{{ vm_names }}"
      when: env is defined

  always:
    - name: Logout from RHV
      redhat.rhv.ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
