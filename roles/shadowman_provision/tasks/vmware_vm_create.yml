---
- name: Change facts if running Windows
  ansible.builtin.set_fact:
    operating_system_tag: Windows
  when: operating_system is match("Win.*")

- name: Create and run Linux VM
  community.vmware.vmware_guest:
    cluster: "{{ cluster_id }}"
    datastore: "{{ datastore_id }}"
    folder: "{{ folder_id }}"
    datacenter: Shadowman
    name: "{{ item }}"
    state: "{{ state }}"
    template: "{{ source_vm_id }}"
    wait_for_ip_address: true
    validate_certs: false
  loop: "{{ vm_names }}"
  when: operating_system is match("RHEL.*")
  register: async_results
  async: 1000
  poll: 0

- name: Check RHEL VM Creation status
  ansible.builtin.async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result_item
  when: operating_system is match("RHEL.*")
  register: async_poll_results
  until: async_poll_results.finished
  retries: 100
  delay: 10

- name: Create and run Windows VM
  community.vmware.vmware_guest:
    cluster: "{{ cluster_id }}"
    datastore: "{{ datastore_id }}"
    folder: "{{ folder_id }}"
    datacenter: Shadowman
    name: "{{ item }}"
    state: "{{ state }}"
    template: "{{ source_vm_id }}"
    validate_certs: false
    networks:
      - name: LAN_01
        start_connected: true
        connected: true
    customization:
      domain: ad.shadowman.dev
      autologon: true
      autologoncount: 1
      hostname: "{{ item.split('.')[0] }}"
      productid: "{{ productid }}"
      password: "{{ windowspassword }}"
      runonce:
        - powershell.exe -ExecutionPolicy ByPass -File C:\Windows\Temp\ConfigureRemotingForAnsible.ps1 -ForceNewSSLCert
  loop: "{{ vm_names }}"
  when: operating_system is match("Win.*")
  register: async_results
  async: 1000
  poll: 0

- name: Check Windows VM Creation status
  ansible.builtin.async_status:
    jid: "{{ async_result_item.ansible_job_id }}"
  loop: "{{ async_results.results }}"
  loop_control:
    loop_var: async_result_item
  when: operating_system is match("Win.*")
  register: async_poll_results
  until: async_poll_results.finished
  retries: 100
  delay: 10

- name: Ensure Tags are created
  community.vmware.vmware_tag:
    category_id: "{{ item.category_id }}"
    tag_name: "{{ item.name }}"
    state: present
    validate_certs: false
  loop:
    - { name: "{{ env | default('dev') }}", category_id: urn:vmomi:InventoryServiceCategory:2f8b3120-c05f-4f72-a791-32ee96b43611:GLOBAL }
    - { name: "{{ owner | default('shadowman') }}", category_id: urn:vmomi:InventoryServiceCategory:a5f2bce8-c9b0-4d35-a408-e804817084d4:GLOBAL }

- name: Assign Tags
  community.vmware.vmware_tag_manager:
    tag_names:
      - tag: "{{ operating_system_tag }}"
        category: operating_system
      - tag: "{{ env | default('dev') }}"
        category: environment
      - tag: "{{ owner | default('shadowman') }}"
        category: owner
    object_name: "{{ item }}"
    object_type: VirtualMachine
    state: add
    validate_certs: false
  loop: "{{ vm_names }}"
