---
# Create EC2 VPC Subnet & AWS Create EC2 Security Group & Create EC2 instance with public IP

- name: Change image ID if running Windows
  ansible.builtin.set_fact:
    _image_id_: ami-0b581691fa8799abd
  when: operating_system is match("Win.*")

- name: Change image ID if running RHEL8
  ansible.builtin.set_fact:
    _image_id_: ami-08ba959880afbd2a4
  when: operating_system == "RHEL8"

- name: Change image ID if running RHEL9
  ansible.builtin.set_fact:
    _image_id_: ami-023c6ad2a87d58f18
  when: operating_system == "RHEL9"

- name: Create VPC over AWS Cloud
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_name }}"
    cidr_block: "{{ _vpc_cidr_block_ }}"
    region: "{{ _region_ }}"
    dns_support: true
    dns_hostnames: true
    tenancy: default
    state: present
    tags:
      Name: "{{ vpc_name }}"
  register: ec2_vpc_net_result

- name: Create Internet Gateway for VPC
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ _region_ }}"
    state: present
    tags:
      Name: "{{ igw_name }}"
  register: igw_result

- name: Create EC2 VPC Subnet
  amazon.aws.ec2_vpc_subnet:
    state: present
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    cidr: "{{ _subnet_cidr_ }}"
    region: "{{ _region_ }}"
    tags:
      Name: "{{ subnet_name }}"
  register: vpcsubnet

- name: Create VPC Public Subnet Route Table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ _region_ }}"
    state: present
    tags:
      Name: "{{ _route_table_name_ }}"
    subnets: ["{{ vpcsubnet.subnet.id }}"]
    # create routes
    routes:
      - dest: "{{ destination_cidr_block }}"
        gateway_id: "{{ igw_result.gateway_id }}"
  register: public_route_table

- name: AWS Create EC2 Security Group for RHEL
  amazon.aws.ec2_security_group:
    name: "{{ _security_group_ }}_RHEL"
    description: Security Group for Linux VM
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ _region_ }}"
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 22
      - proto: tcp
        ports:
          - 80
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 80
      - proto: tcp
        ports:
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 443
    tags:
      Name: "{{ _security_group_ }}"
  when: operating_system is match("RHEL.*")

- name: AWS Create EC2 Security Group for Windows
  amazon.aws.ec2_security_group:
    name: "{{ _security_group_ }}_Windows"
    description: Security Group for Windows VM
    vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
    region: "{{ _region_ }}"
    rules:
      - proto: tcp
        ports:
          - 5986
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 5986
      - proto: tcp
        ports:
          - 80
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 80
      - proto: tcp
        ports:
          - 443
        cidr_ip: "0.0.0.0/0"
        rule_desc: allow all on port 443
    tags:
      Name: "{{ _security_group_ }}"
  when: operating_system is match("Win.*")

- name: Create EC2 Key
  amazon.aws.ec2_key:
    name: "{{ _key_name_ }}"
    region: "{{ _region_ }}"
  register: awsec2key

- name: Update SSH key in controller # noqa: no-handler
  ansible.controller.credential:
    name: AWS {{ _key_name_ }}
    state: present
    credential_type: AWS Key
    inputs:
      aws_ssh_key: "{{ awsec2key.key.private_key }}"
      awsusername: ec2-user
  when: awsec2key.changed

- name: Create EC2 instance with public IP for RHEL
  amazon.aws.ec2_instance:
    name: "{{ item }}"
    key_name: "{{ _key_name_ }}"
    vpc_subnet_id: "{{ vpcsubnet.subnet.id }}"
    instance_type: "{{ _instance_type_ }}"
    security_group: "{{ _security_group_ }}_RHEL"
    state: running
    wait: true
    network:
      assign_public_ip: true
    image_id: "{{ _image_id_ }}"
    region: "{{ _region_ }}"
    tags:
      Name: "{{ item }}"
      owner: "{{ owner }}"
      env: "{{ env }}"
      operating_system: RHEL
      usage: shadowmandemos
  loop: "{{ vm_names }}"
  when: operating_system is match("RHEL.*")

- name: Create EC2 instance with public IP for Windows
  amazon.aws.ec2_instance:
    name: "{{ item }}"
    key_name: "{{ _key_name_ }}"
    vpc_subnet_id: "{{ vpcsubnet.subnet.id }}"
    instance_type: "{{ _instance_type_ }}"
    security_group: "{{ _security_group_ }}_Windows"
    state: running
    wait: true
    network:
      assign_public_ip: true
    image_id: "{{ _image_id_ }}"
    region: "{{ _region_ }}"
    user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
    tags:
      Name: "{{ item }}"
      owner: "{{ owner }}"
      environment: "{{ env }}"
      operating_system: Windows
      usage: shadowmandemos
  loop: "{{ vm_names }}"
  when: operating_system is match("Win.*")
