---
- name: Set activation key for RHEL7
  ansible.builtin.set_fact:
    activation_key: RHEL7
  when: ansible_distribution_version is match("7.*")

- name: Set activation key for RHEL8
  ansible.builtin.set_fact:
    activation_key: RHEL8
  when: ansible_distribution_version is match("8.*")

- name: Set activation key for RHEL9
  ansible.builtin.set_fact:
    activation_key: RHEL9
  when: ansible_distribution_version is match("9.*")

- name: Set activation key for RHEL10
  ansible.builtin.set_fact:
    activation_key: RHEL10
  when: ansible_distribution_version is match("10.*")

- name: Generate registration command
  redhat.satellite.registration_command:
    smart_proxy: "capsule.shadowman.dev"
    username: "{{ username }}"
    password: "{{ password }}"
    server_url: "{{ server_url }}"
    insecure: true
    setup_remote_execution: false
    ignore_subman_errors: true
    setup_insights: false
    validate_certs: false
    update_packages: false
    setup_remote_execution_pull: false
    activation_keys:
      - "{{ activation_key }}"
  register: register_command

- name: Perform registration
  ansible.builtin.shell:
    cmd: "{{ register_command.registration_command }}"

- name: Ensure base packages installed
  ansible.builtin.dnf:
    name:
      - ipa-client
      - dnf-utils
      - firewalld
    state: present
  when: ansible_pkg_mgr == "dnf"

- name: Upgrade all packages (yum)
  ansible.builtin.yum:
    name: '*'
    state: latest
    update_only: true
  when: ansible_pkg_mgr == "yum"

- name: Upgrade all packages (dnf)
  ansible.builtin.dnf:
    name: '*'
    state: latest
    update_only: true
  when: ansible_pkg_mgr == "dnf"

- name: Check to see if we need a reboot
  ansible.builtin.command: needs-restarting -r
  register: result
  changed_when: result.rc == 1
  failed_when: result.rc > 1
  check_mode: false

- name: Reboot Server if Necessary
  ansible.builtin.reboot:
  when: result.rc == 1

- name: Remove old kernels RHEL 8 and newer
  ansible.builtin.command: dnf remove --oldinstallonly -y
  when: ansible_pkg_mgr == "dnf"
  register: kerneldnfresult
  changed_when: kerneldnfresult.rc == 0
  failed_when: kerneldnfresult.rc > 1

- name: Perform dnf clean
  ansible.builtin.command: dnf clean all
  when: ansible_pkg_mgr == "dnf"
  register: dnfresult
  changed_when: dnfresult.rc == 0
  failed_when: dnfresult.rc > 1

- name: Unregister system Satellite
  community.general.redhat_subscription:
    state: absent
    org_id: Shadowman

- name: Clean subscription-manager
  ansible.builtin.command:
    cmd: "subscription-manager clean"
  register: cleanresult
  changed_when: cleanresult.rc == 0

- name: Delete All Satellite Certs
  ansible.builtin.file:
    state: absent
    path: "/etc/pki/consumer/{{ item }}"
  loop:
    - cert.pem
    - key.pem

- name: Delete hosts from Sat
  redhat.satellite.host:
    name: localhost.localdomain
    username: "{{ username }}"
    password: "{{ password }}"
    server_url: "{{ server_url }}"
    validate_certs: false
    state: absent
  delegate_to: localhost
